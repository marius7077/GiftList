package com.bookit.service;

import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.text.DateFormat;
import java.text.ParseException;
import java.util.Date;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.Spy;

import com.bookit.controller.Command;
import com.bookit.controller.RoomController;
import com.bookit.exception.UnfoundRoomException;
import com.bookit.model.Book;
import com.bookit.model.Room;

public class PrintFormaterTest {
	private static final long janv2020_01 = 1577833200000L;
	private static final long fevr2020_01 = 1580511600000L;
	private String displayRoomLook = "R1, somewhere (1 places) - salle informatique : libre";
	private String displayRoomSee = 
		"Salle R1\n"
		+ "Salle informatique : Oui\n"
		+ "Localisation : Somewhere\n"
		+ "État actuel : Libre\n"
		+ "Nombre de places : 1";
	private String displayBook = "2020-01-01_00:00 - 2020-02-01_00:00 : réservée - Cours (Jean-Test)";
	private Room room = new Room("R1", true, "Somewhere", 1);
	private Book book = new Book(janv2020_01, fevr2020_01, "Jean-Test", "Cours", true);
	
	@Spy
	@InjectMocks
	private PrintFormater printer;
	
	@Mock
	private DateFormat df;
	
	@Mock
	private RoomController roomCtrl;
	
	@Before
	public void setUp() throws UnfoundRoomException, ParseException {
		MockitoAnnotations.initMocks(this);
		
		when(roomCtrl.getRoomByName(anyString())).thenReturn(room);
	}
	
	@Test
	public void testBuildDateOptions() throws ParseException {
		Command c = new Command();
		//Date d1 = date_parser.parse("2020-01-01_00:00");
		//Date d2 = date_parser.parse("2020-02-01_00:00");
		when(df.parse(anyString())).thenReturn(new Date());
		when(df.format(anyObject())).thenReturn("date");
		//when(df.parse("2020-02-01_00:00")).thenReturn(new Date());
		
		//parser.buildDateOptions(c, displayBook + ";khh");
		//Assert.assertEquals(janv2020_01, c.getStartDate());
		//Assert.assertEquals(fevr2020_01, c.getEndDate());
		Assert.assertTrue(true);
	}

}
